{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MPH MPH ( M INQUE for P artitioning H eritability) is a C++ program for fast REML estimation of variance components. The method has the following properties: It is fast and memory-efficient. It has robust convergence. It can perform complex genome-partitioning of quantitative genetic variation. It can estimate genetic correlations. Citation TBA License MPH is distributed under the GPL v3 license . Author and contact Jicai Jiang If you want to submit a issue concerning the software please do so using the MPH Github repository .","title":"Home"},{"location":"#mph","text":"MPH ( M INQUE for P artitioning H eritability) is a C++ program for fast REML estimation of variance components. The method has the following properties: It is fast and memory-efficient. It has robust convergence. It can perform complex genome-partitioning of quantitative genetic variation. It can estimate genetic correlations.","title":"MPH"},{"location":"#citation","text":"TBA","title":"Citation"},{"location":"#license","text":"MPH is distributed under the GPL v3 license .","title":"License"},{"location":"#author-and-contact","text":"Jicai Jiang If you want to submit a issue concerning the software please do so using the MPH Github repository .","title":"Author and contact"},{"location":"auxiliary/","text":"Auxiliary scripts","title":"Auxiliary"},{"location":"auxiliary/#auxiliary-scripts","text":"","title":"Auxiliary scripts"},{"location":"datasets/","text":"Datasets","title":"Datasets"},{"location":"datasets/#datasets","text":"","title":"Datasets"},{"location":"install/","text":"Source code The mph source code is hosted on Github . Installation Binary executables Binary executables are available in the Releases . mph is statically compiled with Intel oneAPI Base & HPC Toolkit 2023.1 and Eigen 3.4.0 on Ubuntu 22. mph should be executable. Type chmod +x mph on the command line if needed. Compilation of mph Requirements Linux x86_64 Intel oneAPI Base & HPC Toolkit Eigen >= 3.4.0 Change the Eigen path in Makefile . On the command line type make while in the directory containing the Makefile . This should produce the executable named mph . For Windows Windows Subsystem for Linux (WSL) can be used to run MPH on a Windows machine. Install Linux on Windows with WSL Ubuntu will be installed by default, and other Linux distributions are available. Run pre-compiled MPH binaries on a WSL Linux distribution as on a Linux machine.","title":"Install"},{"location":"install/#source-code","text":"The mph source code is hosted on Github .","title":"Source code"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#binary-executables","text":"Binary executables are available in the Releases . mph is statically compiled with Intel oneAPI Base & HPC Toolkit 2023.1 and Eigen 3.4.0 on Ubuntu 22. mph should be executable. Type chmod +x mph on the command line if needed.","title":"Binary executables"},{"location":"install/#compilation-of-mph","text":"Requirements Linux x86_64 Intel oneAPI Base & HPC Toolkit Eigen >= 3.4.0 Change the Eigen path in Makefile . On the command line type make while in the directory containing the Makefile . This should produce the executable named mph .","title":"Compilation of mph"},{"location":"install/#for-windows","text":"Windows Subsystem for Linux (WSL) can be used to run MPH on a Windows machine. Install Linux on Windows with WSL Ubuntu will be installed by default, and other Linux distributions are available. Run pre-compiled MPH binaries on a WSL Linux distribution as on a Linux machine.","title":"For Windows"},{"location":"options/","text":"GRM Input file formats MPH uses PLINK bim/fam/bed files for genotypes. Other input files are mostly comma-separated values (CSV) or space-delimited text. SNP info file This CSV file is necessary for making genomic relationship matrices (GRMs). The file has a header line. The first column lists SNP IDs. Each of other columns corresponds to one GRM and each row corresponds to a SNP. In the example data , there are five columns for five chromosomes. If a SNP does not belong to a GRM, leave the corresponding cell empty . If a SNP belongs to n GRMs, put 1 in each of the n cells. To partition SNP heritability by functional annotations , create a SNP info file in which each column (or GRM) represents a category of a functional annotation. Functional annotations may overlap; for example, if a SNP belongs to 6 functional annotation categories, put 1 in each of those 6 cells. Making additive GRMs for chr in {1..5} do mph --make_grm --binary_genotype geno --min_maf 0 --min_hwe_pval 1e-8 --snp_info chr.snp_info.csv --snp_weight $chr --num_threads 10 --out $chr done Making dominance GRMs To construct a dominance GRM, add --dominance . for chr in {1..5} do mph --make_grm --dominance --binary_genotype geno --min_maf 0 --min_hwe_pval 1e-8 --snp_info chr.snp_info.csv --snp_weight $chr --num_threads 10 --out $chr.dom done GRM list The GRM list file is a space-delimited text file listing GRMs, like the example one, chr.grms.txt . It has no header and one or two columns. The first column must be the file path for each GRM. The second column is optional and can be a number or a short GRM identifier. The GRM list is needed for --merge_grms , --deduct_grms , --make_core , --make_fore , and --minque . Merging GRMs If a SNP is used in multiple GRMs, the SNP will be treated to be multiple identical SNPs in the resulting GRM. mph --merge_grms --grm_list chr.grms.txt --output all_snps If there are two columns in the GRM list file, the second one will be ignored in this procedure. Deducting GRMs mph --deduct_grms --grm_list list.grms.txt --output deducted Zeroing out GRM elements mph --zero_grm 0.05 --binary_grm all_snps --output zero_outed All off-diagonal elements smaller than 0.05 are zeroed out, and the resulting matrix is written to the output file. REML/MINQUE Input --grm_list : a space-delimited text file without header. The first column lists GRM file path. The second column is optional and can list an initial VC value for each GRM. --phenotype : a CSV file with a header line. The first column must be the individual ID. --covariate_file : a CSV file with a header line. The first column must be the individual ID. The covariate file is optional. Missing values of phenotypes or covariates need to be left empty. Do not use space, -9, NA, or NaN. REML or iterative MINQUE --minque This flag turns on iterative MINQUE (equivalent to the Fisher scoring algorithm for REML). mph --minque --grm_list chr.grms.txt --phenotype phen.csv --trait milk --num_threads 10 --output milk.chr MINQUE(0) or MINQUE(1) To force MINQUE(0) or MINQUE(1), add --num_iterations 1 . The second column of the GRM list file should be set to 0 for MINQUE(0) and 1 for MINQUE(1). mph --minque --num_iterations 1 --grm_list chr.grms.txt --phenotype phen.csv --trait milk --num_threads 10 --output milk.chr Memory-saving mode --save_memory This flag enables the memory-saving mode. This mode is not necessarily slower, particularly on a solid-state drive. Covariates To include covariates, add --covariate_file and --covariate_names . --covariate_file covar.csv --covariate_names all If all is specified, MPH will use as covariates all columns from the 2nd to the last in the covariate file. --covariate_file covar.csv --covariate_names g1,g2,g3 Pseudo-phenotypes If needed, add --error_weight_name to specify individual reliabilies for pseudo-phenotypes (e.g., de-regressed estimated breeding values). --error_weight_name milk_wt The error weights can be set to 1/ r 2 -1. General relationship matrix The --grm_list file can include any general relationship matrix, not just genomic relationship matrices. Additional options --heritability 0.5 The heritability value for initializing REML/MINQUE iterations. An accurate value may improve convergence. The default is 0.5. --num_iterations 20 Max number of REML iterations. The default is 20. --tol 0.01 Tolerance. REML iterations stop when logLL has a change smaller than that. The default is 0.01. --num_random_vectors 100 Number of random probing vectors for stochastic trace estimation. The default (100) is usually sufficient. --seed 0 Random seed in stochastic trace estimation. The default is 0. Output Filename suffix Description mq.blue.csv Best linear unbiased estimates of fixed effects mq.iter.csv Summary of REML iterations mq.vc.csv Variance component estimates mq.py.csv Residuals of the linear mixed model mq.vc.csv has the following columns. Column Description name Name of the variance component or GRM m Weighted number of SNPs in the GRM var Estimate of the variance component seV Standard error of the variance component estimate pve Estimate of the proportion of variance explained seP Standard error of the estimate of the proportion of variance explained enrichment Estimate of the per-SNP heritability enrichment seE Standard error of the estimate of the per-SNP heritability enrichment CORE/FORE COvariance between Random Effects (CORE) First-Order interaction between Random Effects (FORE) Simulation Simulating phenotypes based on a list of GRMs mph --simulate --num_phenotypes 100 --grm_list chr.grms.txt --heritability 0.5 --output sim_pheno In the i th row of the GRM list file are GRM( i ) and VC( i ). MPH simulates total genetic values ( g ) by sampling g from N( 0 , V ) in which V is equal to the sum of all GRM( i )*VC( i ). MPH further simulates phenotypes by adding an error term ( e ) to g based on heritability. Prediction Empirical best linear unbiased predictions (EBLUPs) mph --pred --mq_file milk.chr --output milk.chr MPH computes EBLUPs using the output of --minque and outputs them to a file with a suffix of .mq.blup.csv. For genomic partitioning, EBLUPs are the estimates of direct genomic values.","title":"Documentation"},{"location":"options/#grm","text":"","title":"GRM"},{"location":"options/#input-file-formats","text":"MPH uses PLINK bim/fam/bed files for genotypes. Other input files are mostly comma-separated values (CSV) or space-delimited text.","title":"Input file formats"},{"location":"options/#snp-info-file","text":"This CSV file is necessary for making genomic relationship matrices (GRMs). The file has a header line. The first column lists SNP IDs. Each of other columns corresponds to one GRM and each row corresponds to a SNP. In the example data , there are five columns for five chromosomes. If a SNP does not belong to a GRM, leave the corresponding cell empty . If a SNP belongs to n GRMs, put 1 in each of the n cells. To partition SNP heritability by functional annotations , create a SNP info file in which each column (or GRM) represents a category of a functional annotation. Functional annotations may overlap; for example, if a SNP belongs to 6 functional annotation categories, put 1 in each of those 6 cells.","title":"SNP info file"},{"location":"options/#making-additive-grms","text":"for chr in {1..5} do mph --make_grm --binary_genotype geno --min_maf 0 --min_hwe_pval 1e-8 --snp_info chr.snp_info.csv --snp_weight $chr --num_threads 10 --out $chr done","title":"Making additive GRMs"},{"location":"options/#making-dominance-grms","text":"To construct a dominance GRM, add --dominance . for chr in {1..5} do mph --make_grm --dominance --binary_genotype geno --min_maf 0 --min_hwe_pval 1e-8 --snp_info chr.snp_info.csv --snp_weight $chr --num_threads 10 --out $chr.dom done","title":"Making dominance GRMs"},{"location":"options/#grm-list","text":"The GRM list file is a space-delimited text file listing GRMs, like the example one, chr.grms.txt . It has no header and one or two columns. The first column must be the file path for each GRM. The second column is optional and can be a number or a short GRM identifier. The GRM list is needed for --merge_grms , --deduct_grms , --make_core , --make_fore , and --minque .","title":"GRM list"},{"location":"options/#merging-grms","text":"If a SNP is used in multiple GRMs, the SNP will be treated to be multiple identical SNPs in the resulting GRM. mph --merge_grms --grm_list chr.grms.txt --output all_snps If there are two columns in the GRM list file, the second one will be ignored in this procedure.","title":"Merging GRMs"},{"location":"options/#deducting-grms","text":"mph --deduct_grms --grm_list list.grms.txt --output deducted","title":"Deducting GRMs"},{"location":"options/#zeroing-out-grm-elements","text":"mph --zero_grm 0.05 --binary_grm all_snps --output zero_outed All off-diagonal elements smaller than 0.05 are zeroed out, and the resulting matrix is written to the output file.","title":"Zeroing out GRM elements"},{"location":"options/#remlminque","text":"","title":"REML/MINQUE"},{"location":"options/#input","text":"--grm_list : a space-delimited text file without header. The first column lists GRM file path. The second column is optional and can list an initial VC value for each GRM. --phenotype : a CSV file with a header line. The first column must be the individual ID. --covariate_file : a CSV file with a header line. The first column must be the individual ID. The covariate file is optional. Missing values of phenotypes or covariates need to be left empty. Do not use space, -9, NA, or NaN.","title":"Input"},{"location":"options/#reml-or-iterative-minque","text":"--minque This flag turns on iterative MINQUE (equivalent to the Fisher scoring algorithm for REML). mph --minque --grm_list chr.grms.txt --phenotype phen.csv --trait milk --num_threads 10 --output milk.chr","title":"REML or iterative MINQUE"},{"location":"options/#minque0-or-minque1","text":"To force MINQUE(0) or MINQUE(1), add --num_iterations 1 . The second column of the GRM list file should be set to 0 for MINQUE(0) and 1 for MINQUE(1). mph --minque --num_iterations 1 --grm_list chr.grms.txt --phenotype phen.csv --trait milk --num_threads 10 --output milk.chr","title":"MINQUE(0) or MINQUE(1)"},{"location":"options/#memory-saving-mode","text":"--save_memory This flag enables the memory-saving mode. This mode is not necessarily slower, particularly on a solid-state drive.","title":"Memory-saving mode"},{"location":"options/#covariates","text":"To include covariates, add --covariate_file and --covariate_names . --covariate_file covar.csv --covariate_names all If all is specified, MPH will use as covariates all columns from the 2nd to the last in the covariate file. --covariate_file covar.csv --covariate_names g1,g2,g3","title":"Covariates"},{"location":"options/#pseudo-phenotypes","text":"If needed, add --error_weight_name to specify individual reliabilies for pseudo-phenotypes (e.g., de-regressed estimated breeding values). --error_weight_name milk_wt The error weights can be set to 1/ r 2 -1.","title":"Pseudo-phenotypes"},{"location":"options/#general-relationship-matrix","text":"The --grm_list file can include any general relationship matrix, not just genomic relationship matrices.","title":"General relationship matrix"},{"location":"options/#additional-options","text":"--heritability 0.5 The heritability value for initializing REML/MINQUE iterations. An accurate value may improve convergence. The default is 0.5. --num_iterations 20 Max number of REML iterations. The default is 20. --tol 0.01 Tolerance. REML iterations stop when logLL has a change smaller than that. The default is 0.01. --num_random_vectors 100 Number of random probing vectors for stochastic trace estimation. The default (100) is usually sufficient. --seed 0 Random seed in stochastic trace estimation. The default is 0.","title":"Additional options"},{"location":"options/#output","text":"Filename suffix Description mq.blue.csv Best linear unbiased estimates of fixed effects mq.iter.csv Summary of REML iterations mq.vc.csv Variance component estimates mq.py.csv Residuals of the linear mixed model mq.vc.csv has the following columns. Column Description name Name of the variance component or GRM m Weighted number of SNPs in the GRM var Estimate of the variance component seV Standard error of the variance component estimate pve Estimate of the proportion of variance explained seP Standard error of the estimate of the proportion of variance explained enrichment Estimate of the per-SNP heritability enrichment seE Standard error of the estimate of the per-SNP heritability enrichment","title":"Output"},{"location":"options/#corefore","text":"","title":"CORE/FORE"},{"location":"options/#covariance-between-random-effects-core","text":"","title":"COvariance between Random Effects (CORE)"},{"location":"options/#first-order-interaction-between-random-effects-fore","text":"","title":"First-Order interaction between Random Effects (FORE)"},{"location":"options/#simulation","text":"Simulating phenotypes based on a list of GRMs mph --simulate --num_phenotypes 100 --grm_list chr.grms.txt --heritability 0.5 --output sim_pheno In the i th row of the GRM list file are GRM( i ) and VC( i ). MPH simulates total genetic values ( g ) by sampling g from N( 0 , V ) in which V is equal to the sum of all GRM( i )*VC( i ). MPH further simulates phenotypes by adding an error term ( e ) to g based on heritability.","title":"Simulation"},{"location":"options/#prediction","text":"Empirical best linear unbiased predictions (EBLUPs) mph --pred --mq_file milk.chr --output milk.chr MPH computes EBLUPs using the output of --minque and outputs them to a file with a suffix of .mq.blup.csv. For genomic partitioning, EBLUPs are the estimates of direct genomic values.","title":"Prediction"},{"location":"performance/","text":"Performance","title":"Performance"},{"location":"performance/#performance","text":"","title":"Performance"}]}